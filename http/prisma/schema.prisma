generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  role        Role          @default(STUDENT)
  profileUrl  String?
  progress    CourseProgress[]
  course      Course[]
  enrollments Enrollment[]
  purchases   Purchase[]
}

enum Role {
  INSTRUCTOR
  STUDENT
}

model Course {
  id            String         @id @default(uuid())
  instructorId  String
  Instructor    User            @relation(fields: [instructorId], references: [id])
  title         String
  description   String?
  price         Float?
  imageUrl      String?
  level         Level
  isPublished   Boolean         @default(false)
  categoryId    String
  category      Category        @relation(fields: [categoryId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  lectures      Lecture[]
  enrollments   Enrollment[]
  progress      CourseProgress[]
  purchases     Purchase[]

  @@index([instructorId])
  @@index([categoryId])
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  courses       Course[]
}

model Enrollment {
  id        String     @id @default(cuid())
  userId    String
  courseId  String
  user      User       @relation(fields: [userId], references: [id])
  course    Course     @relation(fields: [courseId], references: [id])

  @@index([userId])
  @@index([courseId])
}

model Lecture {
  id          String    @id @default(uuid())
  title       String
  description String?
  publicId    String?
  videoUrl    String?
  preview     Boolean   @default(false)
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  progress    LectureProgress[]

  @@index([courseId])
}

model LectureProgress {
  id                String   @id @default(uuid())
  lectureId         String
  lecture           Lecture?  @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  courseProgressId  String
  courseProgress    CourseProgress @relation(fields: [courseProgressId], references: [id], onDelete: Cascade)
  viewed            Boolean  @default(false)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([courseProgressId])
  @@index([lectureId])
  @@unique([lectureId, courseProgressId])
}

model CourseProgress {
  id             String             @id @default(uuid())
  userId         String
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completed      Boolean            @default(false)
  lectureProgress       LectureProgress[]

  @@index([userId])
  @@index([courseId])
  @@unique([userId, courseId])
}

model Purchase {
  id              String    @id @default(uuid())
  transactionId   String
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  courseId        String
  course          Course    @relation(fields: [courseId], references: [id])
  amount          Float
  status          Status    @default(PENDING)
  createdAt       DateTime  @default(now())

  @@index([userId])
  @@index([courseId])
  @@unique([userId, courseId])
}

enum Status {
  PENDING
  COMPLETED
  FAILED
}